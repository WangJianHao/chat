server:
  port: 8402

# websocket配置
websocket:
  port: 5001

spring:
  application:
    name: chat-server
  # 数据库配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://localhost:3306/sen_chat?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    username: root
    password:
    druid:
      initial-size: 5 #连接池初始化大小
      min-idle: 10 #最小空闲连接数
      max-active: 20 #最大连接数
      web-stat-filter:
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" #不统计这些请求数据
      stat-view-servlet: #访问监控网页的登录用户名和密码
        login-username: druid
        login-password: druid
  # redis配置
  redis:
    host: localhost # Redis服务器地址
    database: 2 # Redis数据库索引（默认为0）
    port: 6379 # Redis服务器连接端口
    password:  # Redis服务器连接密码（默认为空）
    timeout: 3000ms # 连接超时时间（毫秒）
  #文件分片上传设置单个文件大小和请求总文件大小
  servlet:
    multipart:
      enabled: true
      max-file-size: 15MB
      max-request-size: 15MB
      #阈值，超过后文件将被写入磁盘
      #file-size-threshold: 2KB
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
    #邮箱配置
#  mail:
#    host: smtp.qq.com
#    username: xxx@qq.com
#    password:
#    default-encoding: UTF-8
#    properties:
#      mail:
#        debug: true
#        smtp:
#          socketFactory:
#            class: javax.net.ssl.SSLSocketFactory


mybatis-plus:
  mapper-locations:
    - classpath:mapper/*.xml
  configuration:
    database-id: mysql

#rocketmq配置
rocketmq:
  name-server: 127.0.0.1:9876
  # 生产者配置
  producer:
    # 发送同一类消息的设置为同一个group，保证唯一
    group: chatGroup
    send-message-timeout: 3000 # 发送消息超时时间，单位：毫秒。默认为 3000 。
    compress-message-body-threshold: 4096 # 消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B
    max-message-size: 4194304 # 消息体的最大允许大小。。默认为 4 * 1024 * 1024B
    retry-times-when-send-failed: 2 # 同步发送消息时，失败重试次数。默认为 2 次。
    retry-times-when-send-async-failed: 2 # 异步发送消息时，失败重试次数。默认为 2 次。
    retry-next-server: false # 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false
    enable-msg-trace: true # 是否开启消息轨迹功能。默认为 true 开启。可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/msg_trace/user_guide.md 文档
    customized-trace-topic: RMQ_SYS_TRACE_TOPIC # 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC 。
  consumer:
    listeners: # 配置某个消费分组，是否监听指定 Topic 。结构为 Map<消费者分组, <Topic, Boolean>> 。默认情况下，不配置表示监听。
      erbadagang-consumer-group:
        topic1: false # 关闭 test-consumer-group 对 topic1 的监听消费

# minio配置
minio:
  access-key: q1sQI2m3asfbAphCWNqf
  secret-key: LZEdmfHatNjZKUyr9EvHu016BBID31GODAvcI6jY
  url: http://localhost:9000
  bucket-name: chat-server
  temp-bucket-name: chat-server-temp

# 日志配置
logging:
  config: classpath:logback-spring.xml
  level:
    root: info
    sql: debug
    web: info

# 资源文件所在位置
project:
  folder: D:\\code_workspace\\IdeaProjects\\resource\\









